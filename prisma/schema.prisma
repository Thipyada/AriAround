generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  name           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  status         Status       @default(PENDING)
  earnrule       Earnrule[]   @relation(fields: [earnruleIds], references: [id])
  earnruleIds    String[]     @db.ObjectId
}

model Admin {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  name        String       @unique
  email       String       @unique
  profilePic  String?
  phone       String?
  permissions Permission[]
}

type Permission {
  feature           String
  show              Boolean
  permissionFeature PermissionFeature
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String   @unique
  Instagram String?
  Facebook  String?
  type      String
  status    Status   @default(PENDING)
  users     User[]
}

model Earnrule {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime            @default(now())
  name              String              @unique
  type              String
  period            Period              @default(ALL_TIME) //if custom, then add start and end date
  startDate         String?
  endDate           String?
  picture           String //url
  frequency         RightperFrequency
  setting           ResultSetting
  active            Boolean             @default(true)
  communityEarnrule communityEarnrule[]
  Shops             Shop[]              @relation(fields: [shopIds], references: [id])
  shopIds           String[]            @db.ObjectId
  User              User[]              @relation(fields: [userId], references: [id])
  userId            String[]            @db.ObjectId
}

model Community {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime            @default(now())
  thaiName    String              @unique
  englishName String              @unique
  founded     String
  updated     String
  active      Boolean             @default(true)
  description String?
  owner       String //who? Organization?, User?, Admin?
  shop        Shop[]
  code        communityEarnrule[]
}

model communityEarnrule {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @db.ObjectId
  earnrule    Earnrule  @relation(fields: [earnruleId], references: [id])
  earnruleId  String    @db.ObjectId
}

model Shop {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  name        String     @unique
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String     @db.ObjectId
  earnrule    Earnrule[] @relation(fields: [earnruleIds], references: [id])
  earnruleIds String[]   @db.ObjectId
}

type ResultSetting {
  resultType ResultType
  value      ValueperCoin
}

type ValueperCoin {
  amount Int @default(1) //FIXED Amount
  coin   Int
}

type RightperFrequency {
  right     Int
  frequency Frequency
}

enum ResultType {
  FIXED //fixed amount
  BUY_AMOUNT //increase by buy amount
}

enum Frequency {
  DAILY
  MONTHLY
}

enum Period {
  ALL_TIME
  CUSTOM
}

enum Status {
  ACTIVE
  PENDING
  REJECTED
}

enum PermissionFeature {
  VIEW
  EDIT
}
